name: CI

on:
  push:
    branches:
      - main
    tags:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  swift-test:
    name: swift-test - Xcode ${{ matrix.xcode }}
    runs-on: macos-latest
    strategy:
      matrix:
        xcode: ['12.5.1', '13.2.1']
      fail-fast: false
    env:
      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode }}.app
    steps:
      - uses: actions/checkout@v2
      - run: make swift-test

  swift-test-linux:
    name: swift-test-linux - Swift ${{ matrix.swift-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        swift-version: ['5.4.2', '5.5.3']
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - run: make swift-test-linux SWIFT_VERSION=${{ matrix.swift-version }}

  swift-test-windows:
    name: swift-test-windows - Swift ${{ matrix.swift-version }}
    runs-on: windows-latest
    strategy:
      matrix:
        swift-version: ['5.4.2', '5.5.3']
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Set up Swift Windows
        run: ./scripts/SwiftWindows.ps1 -SwiftVersion ${{ matrix.swift-version }}
      - name: Test a Swift package
        run: swift package clean && swift test

  codecov:
    name: codecov - Xcode ${{ matrix.xcode }}
    runs-on: macos-latest
    strategy:
      matrix:
        xcode: ['13.2.1']
      fail-fast: false
    env:
      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode }}.app
    steps:
      - uses: actions/checkout@v2
      - name: export-codecov
        run: make export-codecov
      - name: codecov
        if: success()
        uses: codecov/codecov-action@v1
        with:
          file: coverage.lcov
          token: ${{ secrets.CODECOV_TOKEN }}

  xcode:
    name: ${{ matrix.make-target }} - Xcode ${{ matrix.xcode }}
    runs-on: macos-latest
    strategy:
      matrix:
        make-target:
          [
            xcode-test,
            xcode-build,
            pod-lib-lint,
            carthage-build-workaround,
            carthage-build-xcframeworks,
          ]
        xcode: ['13.2.1']
      fail-fast: false
    env:
      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode }}.app
    steps:
      - uses: actions/checkout@v2
      - run: make ${{ matrix.make-target }}

  build-darwin:
    name: ${{ matrix.make-target }} - Xcode ${{ matrix.xcode }}
    runs-on: macos-latest
    strategy:
      matrix:
        make-target: 
          [
            swift-build,
            bazel-build,
            cmake-build
          ]
        xcode: ['13.2.1']
      fail-fast: false
    env:
      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode }}.app
    steps:
      - uses: actions/checkout@v2
      - run: make ${{ matrix.make-target }}

  build-linux:
    name: ${{ matrix.make-target }} - Swift ${{ matrix.swift-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        make-target:
          [
            swift-build-linux,
            bazel-build-linux,
            cmake-build-linux
          ]
        swift-version: ['5.5.3']
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - run: make ${{ matrix.make-target }} SWIFT_VERSION=${{ matrix.swift-version }}

  build-windows:
    name: cmake-build-windows - Swift ${{ matrix.swift-version }}
    runs-on: windows-latest
    strategy:
      matrix:
        swift-version: ['5.5.3']
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Set up Swift Windows
        run: ./scripts/SwiftWindows.ps1 -SwiftVersion ${{ matrix.swift-version }}
      - name: Build with CMake and Ninja
        run: |
          $SwiftFlags = '-sdk ' + "$Env:SDKROOT".Replace('\', '/')
          cmake -B ./build -D CMAKE_C_COMPILER=clang -D CMAKE_BUILD_TYPE=Release -D CMAKE_Swift_FLAGS=$SwiftFlags -G Ninja -S .
          ninja -C ./build -v
